version: '3.7'
# Si se abre des del Portainer o 0.0.0.0:4200 no funciona (problema con CORS) ya que es para abrir des de localhost:4200
services:
  # Constenedor de mongo en el cual incluimos como volumentes la informacion de la base de datos.
  # Ademas de que enlazamos el script import.sh al entrypoint para que sea ejecutado
  # este escript importa la la base de datos que hemos enlazado con el primer volumen.
  mongo_container:
    image: mongo:latest
    container_name: mongo_container

    volumes:
      - ./mongo/dump/mydb:/dump
      - ./mongo/import.sh:/docker-entrypoint-initdb.d/import.sh
    restart: always
    networks:
      - app
  # Este contenedor es el backend de nuestro proyecto, depende de el contenedor de mongo
  backend:
    build: ./backend
    depends_on:
      - mongo_container
    ports:
      - "3001:3001"
    restart: always
    #La aplicación de express arrancara cuando la base de datos este operativa.
    command: sh -c '/app/wait-for-it.sh -t 0 mongo_container:27017 -- npm run start'
    networks:
      - app

  # Este contenedor es el frontend de nuestro proyecto, depende de el contenedor del backend.
  frontend:
    build: ./frontend
    restart: always
    depends_on:
      - backend
    ports:
      - 4200:4200
    networks:
      - app
  #Este contenedor nos administrar la base de datos mongo.
  #Utiliza la variable de entorno ME_CONFIG_MONGODB_SERVER la cual contiene la ip o en este caso.
  #Tambien utiliza la variable ME_CONFIG_MONGODB_ENABLE_ADMIN para poder acceder sin un usuario o contraseña expecificos.
  #Necesita el restart always porque si no da error al no poder conectarse con mongo.
  adminMongo_container:
    image: mongo-express:latest
    networks:
      - app
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo_container
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=mydb
    ports:
      - "8081:8081"
    depends_on:
      - mongo_container

  #Para utilizar el load balncer hemos cambiado el puerto que utiliza el frontend para realizar las peticiones, ahora este es el 8080 y no el 3001.
  #De igual forma ahora se accede al frontend desde el puerto 8080 y no el 4200. 
  loadBalancer:
    image: nginx:latest
    networks:
      - app
    ports:
      - "8080:80"
    restart: always
    volumes:
      - "./loadbalancer/nginx.conf:/etc/nginx/nginx.conf"
    command: nginx -g "daemon off;"

#Hemos associado el fichero de fonfiguración y hemos ejecutado el commando para que prometheus utilize este.
#Hemos utilizado express-prometheus-middlewareen en el servidor para que prometheus pueda obtener sus metricas.
  prometheus:
    image: prom/prometheus:v2.20.1
    container_name: prometheus_practica
    networks:
      - app
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
  #Los contenedores estan en la misma red.
networks:
  app: